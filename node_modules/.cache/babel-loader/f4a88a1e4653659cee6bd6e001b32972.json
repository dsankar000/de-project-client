{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/divyasankar/Desktop/Semester_2/Data_Engineering/project/create-react-app/univ/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"mutation createUser($name: String!, $email: String!, $role: Role, $password: String!){\\n                 addUser(user: {name: $name, email: $email, role: $role, password: $password}) {\\n                          id  name\\n                        }\\n                }\\n      \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider, Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport ApoClient from \"./ApolloClient\";\n\nclass UserService {\n  constructor() {\n    this.loginUser = (email, password) => {\n      console.log(\"email:\", email, \"password:\", password);\n      return \"Success\";\n    };\n\n    this.addUser = (fname, email, password, role) => {\n      console.log(\"fname:\", fname, \"email:\", email, \"password:\", password, \"role:\", role);\n      return ApoClient.mutate({\n        mutation: gql(_templateObject()),\n        variables: {\n          name: fname,\n          email: email,\n          role: role,\n          password: password\n        }\n      });\n    };\n\n    this.updateUser = (id, fname, email, password, role) => {\n      console.log(\"id:\", id, \"fname:\", fname, \"email:\", email, \"password:\", password, \"role:\", role);\n      return \"Success\";\n    };\n  }\n\n  static getUser() {\n    if (this.currInstance == null) {\n      this.currInstance = new UserService();\n    }\n\n    return this.currInstance;\n  }\n\n}\n\nUserService.currInstance = null;\nconst myUserService = UserService.getUser();\nexport default myUserService;","map":{"version":3,"sources":["/Users/divyasankar/Desktop/Semester_2/Data_Engineering/project/create-react-app/univ/src/userService.js"],"names":["ApolloClient","ApolloProvider","Query","gql","ApoClient","UserService","loginUser","email","password","console","log","addUser","fname","role","mutate","mutation","variables","name","updateUser","id","getUser","currInstance","myUserService"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,cAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,OAAOC,SAAP,MAAsB,gBAAtB;;AAEA,MAAMC,WAAN,CAAkB;AAAA;AAAA,SAUdC,SAVc,GAUF,CAACC,KAAD,EAAOC,QAAP,KAAoB;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBH,KAArB,EAA2B,WAA3B,EAAuCC,QAAvC;AACA,aAAO,SAAP;AAED,KAda;;AAAA,SAiBdG,OAjBc,GAiBJ,CAACC,KAAD,EAAOL,KAAP,EAAaC,QAAb,EAAsBK,IAAtB,KAA+B;AACvCJ,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBE,KAArB,EAA2B,QAA3B,EAAoCL,KAApC,EAA0C,WAA1C,EAAsDC,QAAtD,EAA+D,OAA/D,EAAuEK,IAAvE;AACA,aAAOT,SAAS,CAACU,MAAV,CAAiB;AACpBC,QAAAA,QAAQ,EAAEZ,GAAF,mBADY;AAOpBa,QAAAA,SAAS,EAAE;AAAEC,UAAAA,IAAI,EAAEL,KAAR;AAAeL,UAAAA,KAAK,EAAEA,KAAtB;AAA6BM,UAAAA,IAAI,EAAEA,IAAnC;AAAyCL,UAAAA,QAAQ,EAAEA;AAAnD;AAPS,OAAjB,CAAP;AASD,KA5Ba;;AAAA,SA8BdU,UA9Bc,GA8BD,CAACC,EAAD,EAAIP,KAAJ,EAAUL,KAAV,EAAgBC,QAAhB,EAAyBK,IAAzB,KAAkC;AAC7CJ,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBS,EAAlB,EAAqB,QAArB,EAA8BP,KAA9B,EAAoC,QAApC,EAA6CL,KAA7C,EAAmD,WAAnD,EAA+DC,QAA/D,EAAwE,OAAxE,EAAgFK,IAAhF;AACA,aAAO,SAAP;AACD,KAjCa;AAAA;;AAGd,SAAOO,OAAP,GAAiB;AACb,QAAI,KAAKC,YAAL,IAAqB,IAAzB,EAA+B;AAC3B,WAAKA,YAAL,GAAoB,IAAIhB,WAAJ,EAApB;AACH;;AACD,WAAO,KAAKgB,YAAZ;AACH;;AARa;;AAAZhB,W,CACKgB,Y,GAAe,I;AAmC1B,MAAMC,aAAa,GAAGjB,WAAW,CAACe,OAAZ,EAAtB;AACA,eAAeE,aAAf","sourcesContent":["import ApolloClient from \"apollo-boost\";\nimport { ApolloProvider, Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nimport ApoClient from \"./ApolloClient\";\n\nclass UserService {\n    static currInstance = null;\n\n    static getUser() {\n        if (this.currInstance == null) {\n            this.currInstance = new UserService();\n        }\n        return this.currInstance;\n    }\n\n    loginUser = (email,password) => {\n      console.log(\"email:\",email,\"password:\",password);\n      return \"Success\";\n\n    };\n\n\n    addUser = (fname,email,password,role) => {\n      console.log(\"fname:\",fname,\"email:\",email,\"password:\",password,\"role:\",role);\n      return ApoClient.mutate({\n          mutation: gql`mutation createUser($name: String!, $email: String!, $role: Role, $password: String!){\n                 addUser(user: {name: $name, email: $email, role: $role, password: $password}) {\n                          id  name\n                        }\n                }\n      `,\n          variables: { name: fname, email: email, role: role, password: password }, }\n      );\n    };\n\n    updateUser = (id,fname,email,password,role) => {\n      console.log(\"id:\",id,\"fname:\",fname,\"email:\",email,\"password:\",password,\"role:\",role);\n      return \"Success\";\n    };\n}\n\nconst myUserService = UserService.getUser();\nexport default myUserService;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/divyasankar/Desktop/Semester_2/Data_Engineering/project/create-react-app/univ/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n            mutation LoginUser($email: String!, $password: String!) {\\n                loginUser(email: $email, password: $password) {\\n                    token\\n                    user {\\n                      id\\n                    }\\n                  }\\n                }\\n            \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from \"react\";\nimport decode from 'jwt-decode';\nimport { ApolloProvider, Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport ApoClient from \"./ApolloClient\";\n\nclass AuthService {\n  static getInstance() {\n    if (AuthService._instance == null) {\n      AuthService._instance = new AuthService();\n    }\n\n    return this._instance;\n  } // Initializing important variables\n\n\n  constructor() {\n    this.login = this.login.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n  }\n\n  login(email, password) {\n    console.log(email, password);\n    return ApoClient.mutate({\n      mutation: gql(_templateObject()),\n      variables: {\n        email,\n        password\n      }\n    }).then(result => {\n      this.setToken(result.data); // Setting the token in localStorage\n\n      return Promise.resolve(result);\n    });\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken(); // GEtting token from localstorage\n\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n\n      if (decoded.exp < Date.now() / 1000) {\n        // Checking if token is expired. N\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  setToken(loginData) {\n    // Saves user token to localStorage\n    localStorage.setItem('token', loginData.loginUser.token);\n    localStorage.setItem('user', JSON.stringify(loginData.loginUser));\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('token');\n  }\n\n  getRole() {\n    return localStorage.getItem('role');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n\n  getProfile() {\n    // Using jwt-decode npm package to decode the token\n    return decode(this.getToken());\n  }\n\n  getLoginUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n\n}\n\nAuthService._instance = null;\nconst authService = AuthService.getInstance();\nexport default authService;","map":{"version":3,"sources":["/Users/divyasankar/Desktop/Semester_2/Data_Engineering/project/create-react-app/univ/src/AuthService.js"],"names":["React","Component","decode","ApolloProvider","Query","gql","ApoClient","AuthService","getInstance","_instance","constructor","login","bind","getProfile","email","password","console","log","mutate","mutation","variables","then","result","setToken","data","Promise","resolve","loggedIn","token","getToken","isTokenExpired","decoded","exp","Date","now","err","loginData","localStorage","setItem","loginUser","JSON","stringify","getItem","getRole","logout","removeItem","getLoginUser","parse","authService"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport decode from 'jwt-decode';\nimport { ApolloProvider, Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nimport ApoClient from \"./ApolloClient\";\n\nclass AuthService {\n  static _instance = null;\n\n    static getInstance() {\n        if (AuthService._instance == null) {\n            AuthService._instance = new AuthService();\n        }\n\n        return this._instance;\n    }\n    // Initializing important variables\n    constructor() {\n        this.login = this.login.bind(this);\n        this.getProfile = this.getProfile.bind(this);\n    }\n\n    login(email, password) {\n\n        console.log(email, password);\n\n        return ApoClient.mutate({\n            mutation: gql`\n            mutation LoginUser($email: String!, $password: String!) {\n                loginUser(email: $email, password: $password) {\n                    token\n                    user {\n                      id\n                    }\n                  }\n                }\n            `, variables: { email, password },\n        }).then(result => {\n            this.setToken(result.data); // Setting the token in localStorage\n            return Promise.resolve(result);\n        });\n\n    }\n\n    loggedIn() {\n        // Checks if there is a saved token and it's still valid\n        const token = this.getToken();// GEtting token from localstorage\n        return !!token && !this.isTokenExpired(token) // handwaiving here\n    }\n\n    isTokenExpired(token) {\n        try {\n            const decoded = decode(token);\n            if (decoded.exp < Date.now() / 1000) { // Checking if token is expired. N\n                return true;\n            }\n            else\n                return false;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n\n    setToken(loginData) {\n        // Saves user token to localStorage\n        localStorage.setItem('token', loginData.loginUser.token);\n        localStorage.setItem('user', JSON.stringify(loginData.loginUser));\n\n    }\n\n    getToken() {\n        // Retrieves the user token from localStorage\n        return localStorage.getItem('token');\n    }\n\n    getRole() {\n      return localStorage.getItem('role');\n    }\n\n    logout() {\n        // Clear user token and profile data from localStorage\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n    }\n\n    getProfile() {\n        // Using jwt-decode npm package to decode the token\n        return decode(this.getToken());\n    }\n\n    getLoginUser(){\n        return JSON.parse(localStorage.getItem('user'));\n    }\n}\n\nconst authService = AuthService.getInstance();\nexport default authService;\n"]},"metadata":{},"sourceType":"module"}
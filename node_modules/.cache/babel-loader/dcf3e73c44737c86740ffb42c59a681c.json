{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/divyasankar/Desktop/Semester_2/Data_Engineering/project/create-react-app/univ/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject7() {\n  const data = _taggedTemplateLiteral([\"mutation createAssignmentGrade($assignmentID: ID!, $courseID: ID!, $studentID: ID!, $grade: String!){\\n                  createAssignmentGrade(assignmentID: $assignmentID, courseID: $courseID, studentID: $studentID, grade: $grade) {\\n                          id\\n                        }\\n                }\\n      \"]);\n\n  _templateObject7 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  const data = _taggedTemplateLiteral([\"mutation createAssignment($courseID: ID!, $name: String!){\\n                  createAssignment(courseID: $courseID, name: $name) {\\n                          id name\\n                        }\\n                }\\n      \"]);\n\n  _templateObject6 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  const data = _taggedTemplateLiteral([\"mutation removeStudentFromCourse($userID: ID!, $courseID: ID!){\\n                  removeStudentFromCourse(userID: $userID, courseID: $courseID) {\\n                          id name\\n                        }\\n                }\\n      \"]);\n\n  _templateObject5 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"mutation addStudentToCourse($userID: ID!, $courseID: ID!){\\n                  addStudentToCourse(userID: $userID, courseID: $courseID) {\\n                          id name\\n                        }\\n                }\\n      \"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"mutation updateCourse($courseID: ID!,$name: String!,$professorID: ID!){\\n                  updateCourse(courseID: $courseID, name: $name, professorID: $professorID) {\\n                          id name professor{\\n                                            name email\\n                                        }\\n                        }\\n                }\\n      \"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"mutation deleteCourse($CourseID: ID!){\\n                 deleteCourse(courseID: $CourseID) {\\n                          id name\\n                        }\\n                }\\n      \"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"mutation createCourse($name: String!, $ProfessorID: ID!){\\n                 createCourse(name: $name, professorID: $ProfessorID) {\\n                          id  name  professor{\\n                                            name email\\n                                        }\\n                        }\\n                }\\n      \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider, Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport ApoClient from \"./ApolloClient\";\n\nclass CourseService {\n  constructor() {\n    this.addCourse = (id, name) => {\n      console.log(\"Name\", name, \"ProfessorId\", id);\n      return ApoClient.mutate({\n        mutation: gql(_templateObject()),\n        variables: {\n          name: name,\n          ProfessorID: id\n        }\n      });\n    };\n\n    this.deleteCourse = id => {\n      console.log(\"CourseId\", id);\n      return ApoClient.mutate({\n        mutation: gql(_templateObject2()),\n        variables: {\n          CourseID: id\n        }\n      });\n    };\n\n    this.updateCourse = (courseid, name, profid) => {\n      console.log(\"CourseId\", courseid, \"Name:\", name, \"ProfessorId:\", profid);\n      return ApoClient.mutate({\n        mutation: gql(_templateObject3()),\n        variables: {\n          courseID: courseid,\n          name: name,\n          professorID: profid\n        }\n      });\n    };\n\n    this.addStudentToCourse = (cid, sid) => {\n      console.log(\"CourseId\", cid, \"StudentId\", sid);\n      return ApoClient.mutate({\n        mutation: gql(_templateObject4()),\n        variables: {\n          userID: sid,\n          courseID: cid\n        }\n      });\n    };\n\n    this.removeStudentFromCourse = (cid, sid) => {\n      console.log(\"CourseId\", cid, \"StudentId\", sid);\n      return ApoClient.mutate({\n        mutation: gql(_templateObject5()),\n        variables: {\n          userID: sid,\n          courseID: cid\n        }\n      });\n    };\n\n    this.createAssignment = (id, name) => {\n      console.log(\"CourseId\", id, \"Assignment\", name);\n      return ApoClient.mutate({\n        mutation: gql(_templateObject6()),\n        variables: {\n          courseID: id,\n          name: name\n        }\n      });\n    };\n\n    this.createAssignmentGrade = (aid, cid, sid, grade) => {\n      console.log(\"AssignmentId\", aid, \"CourseId\", cid, \"StudentId\", sid, \"Grade\", grade);\n      return ApoClient.mutate({\n        mutation: gql(_templateObject7()),\n        variables: {\n          assignmentID: aid,\n          courseID: cid,\n          studentID: sid,\n          grade: parseFloat(grade)\n        }\n      });\n    };\n  }\n\n  static getInstance() {\n    if (this.currInstance == null) {\n      this.currInstance = new CourseService();\n    }\n\n    return this.currInstance;\n  }\n\n}\n\nCourseService.currInstance = null;\nconst myCourseService = CourseService.getInstance();\nexport default myCourseService;","map":{"version":3,"sources":["/Users/divyasankar/Desktop/Semester_2/Data_Engineering/project/create-react-app/univ/src/CourseService.js"],"names":["ApolloClient","ApolloProvider","Query","gql","ApoClient","CourseService","addCourse","id","name","console","log","mutate","mutation","variables","ProfessorID","deleteCourse","CourseID","updateCourse","courseid","profid","courseID","professorID","addStudentToCourse","cid","sid","userID","removeStudentFromCourse","createAssignment","createAssignmentGrade","aid","grade","assignmentID","studentID","parseFloat","getInstance","currInstance","myCourseService"],"mappings":"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","sourcesContent":["import ApolloClient from \"apollo-boost\";\nimport { ApolloProvider, Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nimport ApoClient from \"./ApolloClient\";\n\nclass CourseService {\n    static currInstance = null;\n\n    static getInstance() {\n        if (this.currInstance == null) {\n            this.currInstance = new CourseService();\n        }\n        return this.currInstance;\n    }\n\n    addCourse = (id, name) => {\n      console.log(\"Name\",name,\"ProfessorId\",id);\n      return ApoClient.mutate({\n          mutation: gql`mutation createCourse($name: String!, $ProfessorID: ID!){\n                 createCourse(name: $name, professorID: $ProfessorID) {\n                          id  name  professor{\n                                            name email\n                                        }\n                        }\n                }\n      `,\n          variables: { name: name, ProfessorID: id }, }\n      );\n    };\n\n    deleteCourse = (id) => {\n      console.log(\"CourseId\",id);\n      return ApoClient.mutate({\n          mutation: gql`mutation deleteCourse($CourseID: ID!){\n                 deleteCourse(courseID: $CourseID) {\n                          id name\n                        }\n                }\n      `,\n          variables: { CourseID: id } }\n      );\n    };\n\n    updateCourse = (courseid,name,profid) => {\n      console.log(\"CourseId\",courseid,\"Name:\",name,\"ProfessorId:\",profid);\n      return ApoClient.mutate({\n          mutation: gql`mutation updateCourse($courseID: ID!,$name: String!,$professorID: ID!){\n                  updateCourse(courseID: $courseID, name: $name, professorID: $professorID) {\n                          id name professor{\n                                            name email\n                                        }\n                        }\n                }\n      `,\n          variables: { courseID: courseid, name: name, professorID: profid } }\n      );\n    };\n\n    addStudentToCourse = (cid,sid) => {\n      console.log(\"CourseId\",cid,\"StudentId\",sid);\n      return ApoClient.mutate({\n          mutation: gql`mutation addStudentToCourse($userID: ID!, $courseID: ID!){\n                  addStudentToCourse(userID: $userID, courseID: $courseID) {\n                          id name\n                        }\n                }\n      `,\n          variables: { userID: sid, courseID: cid } }\n      );\n    };\n\n    removeStudentFromCourse = (cid,sid) => {\n      console.log(\"CourseId\",cid,\"StudentId\",sid);\n      return ApoClient.mutate({\n          mutation: gql`mutation removeStudentFromCourse($userID: ID!, $courseID: ID!){\n                  removeStudentFromCourse(userID: $userID, courseID: $courseID) {\n                          id name\n                        }\n                }\n      `,\n          variables: { userID: sid, courseID: cid } }\n      );\n    };\n\n    createAssignment = (id, name) => {\n      console.log(\"CourseId\",id,\"Assignment\",name);\n      return ApoClient.mutate({\n          mutation: gql`mutation createAssignment($courseID: ID!, $name: String!){\n                  createAssignment(courseID: $courseID, name: $name) {\n                          id name\n                        }\n                }\n      `,\n          variables: { courseID: id, name: name } }\n      );\n\n    };\n\n    createAssignmentGrade = (aid,cid,sid,grade) => {\n      console.log(\"AssignmentId\",aid,\"CourseId\",cid,\"StudentId\",sid,\"Grade\",grade);\n      return ApoClient.mutate({\n          mutation: gql`mutation createAssignmentGrade($assignmentID: ID!, $courseID: ID!, $studentID: ID!, $grade: String!){\n                  createAssignmentGrade(assignmentID: $assignmentID, courseID: $courseID, studentID: $studentID, grade: $grade) {\n                          id\n                        }\n                }\n      `,\n          variables: { assignmentID: aid, courseID: cid,  studentID: sid, grade: parseFloat(grade)} }\n      );\n    };\n}\n\nconst myCourseService = CourseService.getInstance();\nexport default myCourseService;\n"]},"metadata":{},"sourceType":"module"}